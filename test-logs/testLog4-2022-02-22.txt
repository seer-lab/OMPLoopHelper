tests/fail/fibonacci-GH.c:

Analyzing for loop on line 18:
for (i = 2; i < 10; i++) {
    //i'th element of series is equal to the sum of i-1'th element and i-2'th element.
    fib[i] = fib[i - 1] + fib[i - 2];
}

[INFO] No parallelization problems found with this loop.

tests/fail/jump-statement.c:

Analyzing for loop on line 14:
for (int i = 0; i < sizeof (a) / sizeof (int); i++) {
    sum += a[i];
    break;
}

[WARNING] This for loop can not be parallelized. A "break" statement on line 16 makes the block non-structured.

tests/fail/memConflict.c:

Analyzing for loop on line 12:
for (int i = 0; i < 10; i++) {
    var = i * 10;
    sum += var + var2;
    var2 = i + var;
}

[WARNING] This loop may need to be refactored before being parallelized. Identifier var2 is referenced on line 14 and assigned to on line 15

tests/fail/memConflictComplex.c:

Analyzing for loop on line 13:
for (int i = 0; i < 10; i++) {
    var = i * 10;
    var3 = var2 + var;
    var2 = i + var;
    sum += var + var3;
}

[WARNING] This loop may need to be refactored before being parallelized. Identifier var2 is referenced on line 15 and assigned to on line 16

tests/fail/test-f.c:

Analyzing for loop on line 15:
for (int i = 0; i < sizeof (a) / sizeof (int); i++) {
    sum += sum2 + a[i - 1];
    sum2 += a[i];
}

[WARNING] This loop may need to be refactored before being parallelized. Identifier sum2 is referenced on line 16 and assigned to on line 17

tests/fail/twolist.c:

Analyzing for loop on line 10:
for (int i = 1; i < 20; i++) {
    A[i] = B[i] - A[i - 1];
}

[tests/fail/twolist.c, isParallelizable.txl] : TXL0510E rule/function '=' - (TXL implementation limit) Transform recursion limit exceeded (Probable cause: infinite recursion, small size or stack limit)

tests/pass/collapse-fail.c:

Analyzing for loop on line 19:
for (i = 0; i < 10; i++) {
    for (j = 0; j < 10; j++) {
        result[i][j] = i * j;
        printf ("Index [%d,%d] = %f \n", i, j, result[i][j]);
    }
    printf ("");
}

[INFO] This for loop cannot use the collapse construct without refactoring.
[INFO] No parallelization problems found with this loop.

tests/pass/collapse.c:

Analyzing for loop on line 23:
for (i = 0; i < NUM_THREADS; i++) {
    for (j = 0; j < NUM_THREADS; j++) {
        result[i][j] = i * j;
        printf ("Index [%d,%d] = %f \n", i, j, result[i][j]);
    }
}

[SUGGESTION] Use the collapse construct when parallelizing this for loop.
[INFO] No parallelization problems found with this loop.

tests/pass/lect5example1s.c:

Analyzing for loop on line 34:
for (int i = thread_id; i < num_steps; i = i + t_count) {
    //calculate height
    x = (i + 0.5) * step;
    sum[thread_id] = sum[thread_id] + 4 / (1.0 + x * x);
    //sum F(x)
    sum[thread_id];
}

[INFO] No parallelization problems found with this loop.

tests/pass/memConflict.c:

Analyzing for loop on line 12:
for (int i = 0; i < 10; i++) {
    var = i * 10;
    var2 = i + var;
    sum += var + var2;
}

[INFO] No parallelization problems found with this loop.

tests/pass/memConflictComplex.c:

Analyzing for loop on line 13:
for (int i = 0; i < 10; i++) {
    var = i * 10;
    var2 = 20;
    var3 = var2 + var;
    var2 = i + var;
    sum += var + var3;
}

[INFO] No parallelization problems found with this loop.

tests/pass/pcat-prototype-collapse.c:

Analyzing for loop on line 84:
for (int i = 0; i < MAXCOUNT * max_num_threads * NUM_BLOCKS_TOTAL; i++) {
    OBJS_IN_BLOCK[i] = -1;
    // Can't set it to zero since 0 is a valid object number.
    }

[INFO] No parallelization problems found with this loop.

Analyzing for loop on line 105:
for (i = 0; i < AVX_CACHE * MAX_STARS; i++) {
    OBJS[i] = -1;
    // Can't set it to zero since 0 is a valid object number.
    }

[INFO] No parallelization problems found with this loop.

Analyzing for loop on line 141:
for (i = 0; i < max_num_threads * NUM_BLOCKS_TOTAL; i++) {
    BLOCK_COUNT_THREAD[i] = 0;
}

[INFO] No parallelization problems found with this loop.

tests/pass/pi.c:

Analyzing for loop on line 14:
for (i = 0; i < num_steps; i++) {
    x = (i + 0.5) * step;
    sum = sum + 4.0 / (1.0 + x * x);
}

[tests/pass/pi.c, isParallelizable.txl] : TXL0510E rule/function '=' - (TXL implementation limit) Transform recursion limit exceeded (Probable cause: infinite recursion, small size or stack limit)

tests/pass/pragmaForTest.c:

Analyzing for loop on line 20:
for (int i = 0; i < num_steps; i += 1) {
    printf ("thread:%d\n", omp_get_thread_num ());
    double x = (i + 0.5) * step;
    sum += 4.0 / (1.0 + x * x);
}

[INFO] No parallelization problems found with this loop.

tests/pass/sequence-alignment-GH.c:

Analyzing for loop on line 74:
for (int i = 0; i < strlen (seq2) + 1; i++) // all versions of mutants (O(delta*sq2*seq2))
{
    mutant = seq2;
    if (i != 0) {
        mutant = createMutant (mutant, i);
        // Adding '-' in specific index
        }
    compare_Seqs_With_Offset (seqs_d, seq1, mutant, delta, i);
    // Goes through all versions of seq2 with offset modification
    }


Analyzing for loop on line 97:
for (i = 0; i < strlen (seq) + 1; i++) {
    if (i == index) {
        strncat (mutant, &ch, 1);
    }
    strncat (mutant, &seq[i], 1);
}

[INFO] No parallelization problems found with this loop.

Analyzing for loop on line 120:
for (j = 0; j < lenght; j++) {
    if (seq1[i + j] == seq2[j]) {
        strncat (seq3, &stars, 1);
        // add '*' to seq3
        }
    else {
        if (isColons (seq1[i + j], seq2[j])) {
            strncat (seq3, &colons, 1);
            // add ':' to seq3
            }
        else if (isPoint (seq1[i + j], seq2[j])) {
            strncat (seq3, &points, 1);
            // add '.' to seq3
            }
        else {
            strncat (seq3, &space, 1);
            // add ' ' to seq3
            }
    }
}

[INFO] No parallelization problems found with this loop.

Analyzing for loop on line 185:
for (int i = 0; i < size; i++) // Pass all over the seq3 and summarize the number of time that stars/colons/points/space apear
{
    if (seq3[i] == stars) {
        numOfStars++;
    }
    else if (seq3[i] == colons) {
        numOfColons++;
    }
    else if (seq3[i] == points) {
        numOfPoints++;
    }
    else {
        numOfSpaces++;
    }
}


tests/pass/sum.c:

Analyzing for loop on line 14:
for (int i = 0; i < sizeof (a) / sizeof (int); i++) {
    sum += a[i];
}

[INFO] No parallelization problems found with this loop.


Fail tests:
0. fibonacci-GH.c             Fail
1. jump-statement.c           Pass
2. memConflict.c              Pass
3. memConflictComplex.c       Pass
4. test-f.c                   Pass
5. twolist.c                  Pass

Pass tests:
0. collapse-fail.c            Pass
1. collapse.c                 Pass
2. lect5example1s.c           Pass
3. memConflict.c              Pass
4. memConflictComplex.c       Pass
5. pcat-prototype-collapse.c  Pass
6. pi.c                       Fail
7. pragmaForTest.c            Pass
8. sequence-alignment-GH.c    Fail
9. sum.c                      Pass