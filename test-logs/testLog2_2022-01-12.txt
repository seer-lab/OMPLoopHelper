tests/fail/collapse-fail.c:

Analyzing for loop on line 19:
for (i = 0; i < NUM_THREADS; i++) {
    //@omp-analysis=false
    // this operation means the collapse argument cannot be used
    result[i][j] += 1;
}

This location is written to and read on different iterations (ID): result
This might mean the loop cannot be parallelized in its current state.

tests/fail/fibonacci-GH.c:

Analyzing for loop on line 18:
for (i = 2; i < 10; i++) {
    //i'th element of series is equal to the sum of i-1'th element and i-2'th element.
    fib[i] = fib[i - 1] + fib[i - 2];
}

This location is written to and read on different iterations (ID): fib
This location is written to and read on different iterations (ID): fib
This location is written to and read on different iterations (ID): fib
This location is written to and read on different iterations (ID): fib
This location is written to and read on different iterations (ID): fib
This might mean the loop cannot be parallelized in its current state.

tests/fail/jump-statement.c:

Analyzing for loop on line 14:
for (int i = 0; i < sizeof (a) / sizeof (int); i++) {
    sum += a[i];
    break;
}

This for loop is not currently parallelizable. A "break" statement on line 16 makes the block non-structured.

tests/fail/test-f.c:

Analyzing for loop on line 15:
for (int i = 0; i < sizeof (a) / sizeof (int); i++) {
    sum += sum2 + a[i - 1];
    sum2 += a[i];
}

This location is written to and read on different iterations (ID): sum2
This might mean the loop cannot be parallelized in its current state.

tests/fail/twolist.c:

Analyzing for loop on line 10:
for (int i = 1; i < 20; i++) {
    A[i] = B[i] - A[i - 1];
}

This location is written to and read on different iterations (ID): A
This might mean the loop cannot be parallelized in its current state.

tests/pass/collapse.c:

Analyzing for loop on line 23:
for (i = 0; i < NUM_THREADS; i++) {
    for (j = 0; j < NUM_THREADS; j++) {
        result[i][j] = i * j;
        printf ("Index [%d,%d] = %f \n", i, j, result[i][j]);
    }
}

This for loop can use the collapse construct.
This location is written to and read on different iterations (ID): result
This location is written to and read on different iterations (ID): result
This location is written to and read on different iterations (ID): result
This might mean the loop cannot be parallelized in its current state.

tests/pass/lect5example1s.c:

Analyzing for loop on line 34:
for (int i = thread_id; i < num_steps; i = i + t_count) {
    //calculate height
    x = (i + 0.5) * step;
    sum[thread_id] = sum[thread_id] + 4 / (1.0 + x * x);
    //sum F(x)
    sum[thread_id];
}

This location is written to and read on different iterations (ID): x
This location is written to and read on different iterations (ID): sum
This location is written to and read on different iterations (ID): sum
This location is written to and read on different iterations (ID): x
This location is written to and read on different iterations (ID): x
This might mean the loop cannot be parallelized in its current state.

tests/pass/pcat-prototype-collapse.c:

Analyzing for loop on line 84:
for (int i = 0; i < MAXCOUNT * max_num_threads * NUM_BLOCKS_TOTAL; i++) {
    OBJS_IN_BLOCK[i] = -1;
    // Can't set it to zero since 0 is a valid object number.
    }

No parallelization problems found with this loop.

Analyzing for loop on line 105:
for (i = 0; i < AVX_CACHE * MAX_STARS; i++) {
    OBJS[i] = -1;
    // Can't set it to zero since 0 is a valid object number.
    }

No parallelization problems found with this loop.

Analyzing for loop on line 141:
for (i = 0; i < max_num_threads * NUM_BLOCKS_TOTAL; i++) {
    BLOCK_COUNT_THREAD[i] = 0;
}

No parallelization problems found with this loop.

tests/pass/pi.c:

Analyzing for loop on line 14:
for (i = 0; i < num_steps; i++) {
    x = (i + 0.5) * step;
    sum = sum + 4.0 / (1.0 + x * x);
}

This location is written to and read on different iterations (ID): sum
This location is written to and read on different iterations (ID): x
This location is written to and read on different iterations (ID): x
This might mean the loop cannot be parallelized in its current state.

tests/pass/pragmaForTest.c:

Analyzing for loop on line 20:
for (int i = 0; i < num_steps; i += 1) {
    printf ("thread:%d\n", omp_get_thread_num ());
    double x = (i + 0.5) * step;
    sum += 4.0 / (1.0 + x * x);
}

No parallelization problems found with this loop.

tests/pass/sequence-alignment-GH.c:

Analyzing for loop on line 76:
for (int i = 0; i < strlen (seq2) + 1; i++) //all versions of mutants (O(delta*sq2*seq2))
{
    mutant = seq2;
    if (i != 0) {
        mutant = createMutant (mutant, i);
        //Adding '-' in specific index
        }
    compare_Seqs_With_Offset (seqs_d, seq1, mutant, delta, i);
    //Goes through all versions of seq2 with offset modification
    }


Analyzing for loop on line 99:
for (i = 0; i < strlen (seq) + 1; i++) {
    if (i == index) {
        strncat (mutant, &ch, 1);
    }
    strncat (mutant, &seq[i], 1);
}

No parallelization problems found with this loop.

Analyzing for loop on line 124:
for (j = 0; j < lenght; j++) {
    if (seq1[i + j] == seq2[j]) {
        strncat (seq3, &stars, 1);
        //add '*' to seq3
        }
    else {
        if (isColons (seq1[i + j], seq2[j])) {
            strncat (seq3, &colons, 1);
            //add ':' to seq3
            }
        else if (isPoint (seq1[i + j], seq2[j])) {
            strncat (seq3, &points, 1);
            //add '.' to seq3
            }
        else {
            strncat (seq3, &space, 1);
            //add ' ' to seq3
            }
    }
}

No parallelization problems found with this loop.

Analyzing for loop on line 192:
for (int i = 0; i < size; i++) //Pass all over the seq3 and summarize the number of time that stars/colons/points/space apear
{
    if (seq3[i] == stars) {
        numOfStars++;
    }
    else if (seq3[i] == colons) {
        numOfColons++;
    }
    else if (seq3[i] == points) {
        numOfPoints++;
    }
    else {
        numOfSpaces++;
    }
}


tests/pass/sum.c:

Analyzing for loop on line 14:
for (int i = 0; i < sizeof (a) / sizeof (int); i++) {
    sum += a[i];
}

No parallelization problems found with this loop.


Fail tests:
0. collapse-fail.c            Pass
1. fibonacci-GH.c             Pass
2. jump-statement.c           Pass
3. test-f.c                   Pass
4. twolist.c                  Pass

Pass tests:
0. collapse.c                 Fail
1. lect5example1s.c           Fail
2. pcat-prototype-collapse.c  Pass
3. pi.c                       Fail
4. pragmaForTest.c            Pass
5. sequence-alignment-GH.c    Fail
6. sum.c                      Pass